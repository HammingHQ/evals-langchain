{"version":3,"sources":["../node_modules/decamelize/index.js","../node_modules/camelcase/index.js","../node_modules/uuid/dist/esm-node/rng.js","../node_modules/uuid/dist/esm-node/stringify.js","../node_modules/uuid/dist/esm-node/native.js","../node_modules/uuid/dist/esm-node/v4.js","../node_modules/@langchain/core/dist/load/map_keys.js","../node_modules/@langchain/core/dist/load/serializable.js","../node_modules/@langchain/core/dist/utils/env.js","../node_modules/@langchain/core/dist/callbacks/base.js","../node_modules/@langchain/core/dist/messages/base.js","../node_modules/@langchain/core/dist/messages/tool.js","../node_modules/@langchain/core/dist/messages/ai.js","../node_modules/@langchain/core/dist/messages/chat.js","../node_modules/@langchain/core/dist/messages/function.js","../node_modules/@langchain/core/dist/messages/human.js","../node_modules/@langchain/core/dist/messages/system.js","../src/index.ts"],"sourcesContent":["'use strict';\nmodule.exports = function (str, sep) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\tsep = typeof sep === 'undefined' ? '_' : sep;\n\n\treturn str\n\t\t.replace(/([a-z\\d])([A-Z])/g, '$1' + sep + '$2')\n\t\t.replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, '$1' + sep + '$2')\n\t\t.toLowerCase();\n};\n","'use strict';\n\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\n\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && UPPERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n\tLEADING_CAPITAL.lastIndex = 0;\n\n\treturn input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));\n};\n\nconst postProcess = (input, toUpperCase) => {\n\tSEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n\tNUMBERS_AND_IDENTIFIER.lastIndex = 0;\n\n\treturn input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier))\n\t\t.replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst toLowerCase = options.locale === false ?\n\t\tstring => string.toLowerCase() :\n\t\tstring => string.toLocaleLowerCase(options.locale);\n\tconst toUpperCase = options.locale === false ?\n\t\tstring => string.toUpperCase() :\n\t\tstring => string.toLocaleUpperCase(options.locale);\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n\t}\n\n\tconst hasUpperCase = input !== toLowerCase(input);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, toLowerCase, toUpperCase);\n\t}\n\n\tinput = input.replace(LEADING_SEPARATORS, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input, toLowerCase);\n\t} else {\n\t\tinput = toLowerCase(input);\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = toUpperCase(input.charAt(0)) + input.slice(1);\n\t}\n\n\treturn postProcess(input, toUpperCase);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import snakeCase from \"decamelize\";\nimport camelCase from \"camelcase\";\nexport function keyToJson(key, map) {\n    return map?.[key] || snakeCase(key);\n}\nexport function keyFromJson(key, map) {\n    return map?.[key] || camelCase(key);\n}\nexport function mapKeys(fields, mapper, map) {\n    const mapped = {};\n    for (const key in fields) {\n        if (Object.hasOwn(fields, key)) {\n            mapped[mapper(key, map)] = fields[key];\n        }\n    }\n    return mapped;\n}\n","import { keyToJson, mapKeys } from \"./map_keys.js\";\nfunction shallowCopy(obj) {\n    return Array.isArray(obj) ? [...obj] : { ...obj };\n}\nfunction replaceSecrets(root, secretsMap) {\n    const result = shallowCopy(root);\n    for (const [path, secretId] of Object.entries(secretsMap)) {\n        const [last, ...partsReverse] = path.split(\".\").reverse();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let current = result;\n        for (const part of partsReverse.reverse()) {\n            if (current[part] === undefined) {\n                break;\n            }\n            current[part] = shallowCopy(current[part]);\n            current = current[part];\n        }\n        if (current[last] !== undefined) {\n            current[last] = {\n                lc: 1,\n                type: \"secret\",\n                id: [secretId],\n            };\n        }\n    }\n    return result;\n}\n/**\n * Get a unique name for the module, rather than parent class implementations.\n * Should not be subclassed, subclass lc_name above instead.\n */\nexport function get_lc_unique_name(\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\nserializableClass) {\n    // \"super\" here would refer to the parent class of Serializable,\n    // when we want the parent class of the module actually calling this method.\n    const parentClass = Object.getPrototypeOf(serializableClass);\n    const lcNameIsSubclassed = typeof serializableClass.lc_name === \"function\" &&\n        (typeof parentClass.lc_name !== \"function\" ||\n            serializableClass.lc_name() !== parentClass.lc_name());\n    if (lcNameIsSubclassed) {\n        return serializableClass.lc_name();\n    }\n    else {\n        return serializableClass.name;\n    }\n}\nexport class Serializable {\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */\n    static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */\n    get lc_id() {\n        return [\n            ...this.lc_namespace,\n            get_lc_unique_name(this.constructor),\n        ];\n    }\n    /**\n     * A map of secrets, which will be omitted from serialization.\n     * Keys are paths to the secret in constructor args, e.g. \"foo.bar.baz\".\n     * Values are the secret ids, which will be used when deserializing.\n     */\n    get lc_secrets() {\n        return undefined;\n    }\n    /**\n     * A map of additional attributes to merge with constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the attribute values, which will be serialized.\n     * These attributes need to be accepted by the constructor as arguments.\n     */\n    get lc_attributes() {\n        return undefined;\n    }\n    /**\n     * A map of aliases for constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the alias that will replace the key in serialization.\n     * This is used to eg. make argument names match Python.\n     */\n    get lc_aliases() {\n        return undefined;\n    }\n    constructor(kwargs, ..._args) {\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.lc_kwargs = kwargs || {};\n    }\n    toJSON() {\n        if (!this.lc_serializable) {\n            return this.toJSONNotImplemented();\n        }\n        if (\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        this.lc_kwargs instanceof Serializable ||\n            typeof this.lc_kwargs !== \"object\" ||\n            Array.isArray(this.lc_kwargs)) {\n            // We do not support serialization of classes with arg not a POJO\n            // I'm aware the check above isn't as strict as it could be\n            return this.toJSONNotImplemented();\n        }\n        const aliases = {};\n        const secrets = {};\n        const kwargs = Object.keys(this.lc_kwargs).reduce((acc, key) => {\n            acc[key] = key in this ? this[key] : this.lc_kwargs[key];\n            return acc;\n        }, {});\n        // get secrets, attributes and aliases from all superclasses\n        for (\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let current = Object.getPrototypeOf(this); current; current = Object.getPrototypeOf(current)) {\n            Object.assign(aliases, Reflect.get(current, \"lc_aliases\", this));\n            Object.assign(secrets, Reflect.get(current, \"lc_secrets\", this));\n            Object.assign(kwargs, Reflect.get(current, \"lc_attributes\", this));\n        }\n        // include all secrets used, even if not in kwargs,\n        // will be replaced with sentinel value in replaceSecrets\n        Object.keys(secrets).forEach((keyPath) => {\n            // eslint-disable-next-line @typescript-eslint/no-this-alias, @typescript-eslint/no-explicit-any\n            let read = this;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let write = kwargs;\n            const [last, ...partsReverse] = keyPath.split(\".\").reverse();\n            for (const key of partsReverse.reverse()) {\n                if (!(key in read) || read[key] === undefined)\n                    return;\n                if (!(key in write) || write[key] === undefined) {\n                    if (typeof read[key] === \"object\" && read[key] != null) {\n                        write[key] = {};\n                    }\n                    else if (Array.isArray(read[key])) {\n                        write[key] = [];\n                    }\n                }\n                read = read[key];\n                write = write[key];\n            }\n            if (last in read && read[last] !== undefined) {\n                write[last] = write[last] || read[last];\n            }\n        });\n        return {\n            lc: 1,\n            type: \"constructor\",\n            id: this.lc_id,\n            kwargs: mapKeys(Object.keys(secrets).length ? replaceSecrets(kwargs, secrets) : kwargs, keyToJson, aliases),\n        };\n    }\n    toJSONNotImplemented() {\n        return {\n            lc: 1,\n            type: \"not_implemented\",\n            id: this.lc_id,\n        };\n    }\n}\n","export const isBrowser = () => typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\nexport const isWebWorker = () => typeof globalThis === \"object\" &&\n    globalThis.constructor &&\n    globalThis.constructor.name === \"DedicatedWorkerGlobalScope\";\nexport const isJsDom = () => (typeof window !== \"undefined\" && window.name === \"nodejs\") ||\n    (typeof navigator !== \"undefined\" &&\n        (navigator.userAgent.includes(\"Node.js\") ||\n            navigator.userAgent.includes(\"jsdom\")));\n// Supabase Edge Function provides a `Deno` global object\n// without `version` property\nexport const isDeno = () => typeof Deno !== \"undefined\";\n// Mark not-as-node if in Supabase Edge Function\nexport const isNode = () => typeof process !== \"undefined\" &&\n    typeof process.versions !== \"undefined\" &&\n    typeof process.versions.node !== \"undefined\" &&\n    !isDeno();\nexport const getEnv = () => {\n    let env;\n    if (isBrowser()) {\n        env = \"browser\";\n    }\n    else if (isNode()) {\n        env = \"node\";\n    }\n    else if (isWebWorker()) {\n        env = \"webworker\";\n    }\n    else if (isJsDom()) {\n        env = \"jsdom\";\n    }\n    else if (isDeno()) {\n        env = \"deno\";\n    }\n    else {\n        env = \"other\";\n    }\n    return env;\n};\nlet runtimeEnvironment;\nexport async function getRuntimeEnvironment() {\n    if (runtimeEnvironment === undefined) {\n        const env = getEnv();\n        runtimeEnvironment = {\n            library: \"langchain-js\",\n            runtime: env,\n        };\n    }\n    return runtimeEnvironment;\n}\nexport function getEnvironmentVariable(name) {\n    // Certain Deno setups will throw an error if you try to access environment variables\n    // https://github.com/langchain-ai/langchainjs/issues/1412\n    try {\n        return typeof process !== \"undefined\"\n            ? // eslint-disable-next-line no-process-env\n                process.env?.[name]\n            : undefined;\n    }\n    catch (e) {\n        return undefined;\n    }\n}\n","import * as uuid from \"uuid\";\nimport { Serializable, get_lc_unique_name, } from \"../load/serializable.js\";\nimport { getEnvironmentVariable } from \"../utils/env.js\";\n/**\n * Abstract class that provides a set of optional methods that can be\n * overridden in derived classes to handle various events during the\n * execution of a LangChain application.\n */\nclass BaseCallbackHandlerMethodsClass {\n}\n/**\n * Abstract base class for creating callback handlers in the LangChain\n * framework. It provides a set of optional methods that can be overridden\n * in derived classes to handle various events during the execution of a\n * LangChain application.\n */\nexport class BaseCallbackHandler extends BaseCallbackHandlerMethodsClass {\n    get lc_namespace() {\n        return [\"langchain_core\", \"callbacks\", this.name];\n    }\n    get lc_secrets() {\n        return undefined;\n    }\n    get lc_attributes() {\n        return undefined;\n    }\n    get lc_aliases() {\n        return undefined;\n    }\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */\n    static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */\n    get lc_id() {\n        return [\n            ...this.lc_namespace,\n            get_lc_unique_name(this.constructor),\n        ];\n    }\n    constructor(input) {\n        super();\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"ignoreLLM\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreAgent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreRetriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"raiseError\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"awaitHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: getEnvironmentVariable(\"LANGCHAIN_CALLBACKS_BACKGROUND\") !== \"true\"\n        });\n        this.lc_kwargs = input || {};\n        if (input) {\n            this.ignoreLLM = input.ignoreLLM ?? this.ignoreLLM;\n            this.ignoreChain = input.ignoreChain ?? this.ignoreChain;\n            this.ignoreAgent = input.ignoreAgent ?? this.ignoreAgent;\n            this.ignoreRetriever = input.ignoreRetriever ?? this.ignoreRetriever;\n            this.raiseError = input.raiseError ?? this.raiseError;\n            this.awaitHandlers =\n                this.raiseError || (input._awaitHandler ?? this.awaitHandlers);\n        }\n    }\n    copy() {\n        return new this.constructor(this);\n    }\n    toJSON() {\n        return Serializable.prototype.toJSON.call(this);\n    }\n    toJSONNotImplemented() {\n        return Serializable.prototype.toJSONNotImplemented.call(this);\n    }\n    static fromMethods(methods) {\n        class Handler extends BaseCallbackHandler {\n            constructor() {\n                super();\n                Object.defineProperty(this, \"name\", {\n                    enumerable: true,\n                    configurable: true,\n                    writable: true,\n                    value: uuid.v4()\n                });\n                Object.assign(this, methods);\n            }\n        }\n        return new Handler();\n    }\n}\n","import { Serializable } from \"../load/serializable.js\";\nexport function mergeContent(firstContent, secondContent) {\n    // If first content is a string\n    if (typeof firstContent === \"string\") {\n        if (typeof secondContent === \"string\") {\n            return firstContent + secondContent;\n        }\n        else {\n            return [{ type: \"text\", text: firstContent }, ...secondContent];\n        }\n        // If both are arrays\n    }\n    else if (Array.isArray(secondContent)) {\n        return [...firstContent, ...secondContent];\n        // If the first content is a list and second is a string\n    }\n    else {\n        // Otherwise, add the second content as a new element of the list\n        return [...firstContent, { type: \"text\", text: secondContent }];\n    }\n}\n/**\n * Base class for all types of messages in a conversation. It includes\n * properties like `content`, `name`, and `additional_kwargs`. It also\n * includes methods like `toDict()` and `_getType()`.\n */\nexport class BaseMessage extends Serializable {\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            additional_kwargs: \"additional_kwargs\",\n            response_metadata: \"response_metadata\",\n        };\n    }\n    /**\n     * @deprecated\n     * Use {@link BaseMessage.content} instead.\n     */\n    get text() {\n        return typeof this.content === \"string\" ? this.content : \"\";\n    }\n    constructor(fields, \n    /** @deprecated */\n    kwargs) {\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                content: fields,\n                additional_kwargs: kwargs,\n                response_metadata: {},\n            };\n        }\n        // Make sure the default value for additional_kwargs is passed into super() for serialization\n        if (!fields.additional_kwargs) {\n            // eslint-disable-next-line no-param-reassign\n            fields.additional_kwargs = {};\n        }\n        if (!fields.response_metadata) {\n            // eslint-disable-next-line no-param-reassign\n            fields.response_metadata = {};\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"messages\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /** The content of the message. */\n        Object.defineProperty(this, \"content\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** The name of the message sender in a multi-user chat. */\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Additional keyword arguments */\n        Object.defineProperty(this, \"additional_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Response metadata. For example: response headers, logprobs, token counts. */\n        Object.defineProperty(this, \"response_metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = fields.name;\n        this.content = fields.content;\n        this.additional_kwargs = fields.additional_kwargs;\n        this.response_metadata = fields.response_metadata;\n    }\n    toDict() {\n        return {\n            type: this._getType(),\n            data: this.toJSON()\n                .kwargs,\n        };\n    }\n}\nexport function isOpenAIToolCallArray(value) {\n    return (Array.isArray(value) &&\n        value.every((v) => typeof v.index === \"number\"));\n}\nexport function _mergeDicts(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nleft, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nright\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n    const merged = { ...left };\n    for (const [key, value] of Object.entries(right)) {\n        if (merged[key] == null) {\n            merged[key] = value;\n        }\n        else if (value == null) {\n            continue;\n        }\n        else if (typeof merged[key] !== typeof value ||\n            Array.isArray(merged[key]) !== Array.isArray(value)) {\n            throw new Error(`field[${key}] already exists in the message chunk, but with a different type.`);\n        }\n        else if (typeof merged[key] === \"string\") {\n            merged[key] = merged[key] + value;\n        }\n        else if (!Array.isArray(merged[key]) && typeof merged[key] === \"object\") {\n            merged[key] = _mergeDicts(merged[key], value);\n        }\n        else if (Array.isArray(merged[key])) {\n            merged[key] = _mergeLists(merged[key], value);\n        }\n        else if (merged[key] === value) {\n            continue;\n        }\n        else {\n            console.warn(`field[${key}] already exists in this message chunk and value has unsupported type.`);\n        }\n    }\n    return merged;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function _mergeLists(left, right) {\n    if (left === undefined && right === undefined) {\n        return undefined;\n    }\n    else if (left === undefined || right === undefined) {\n        return left || right;\n    }\n    else {\n        const merged = [...left];\n        for (const item of right) {\n            if (typeof item === \"object\" &&\n                \"index\" in item &&\n                typeof item.index === \"number\") {\n                const toMerge = merged.findIndex((leftItem) => leftItem.index === item.index);\n                if (toMerge !== -1) {\n                    merged[toMerge] = _mergeDicts(merged[toMerge], item);\n                }\n                else {\n                    merged.push(item);\n                }\n            }\n            else {\n                merged.push(item);\n            }\n        }\n        return merged;\n    }\n}\n/**\n * Represents a chunk of a message, which can be concatenated with other\n * message chunks. It includes a method `_merge_kwargs_dict()` for merging\n * additional keyword arguments from another `BaseMessageChunk` into this\n * one. It also overrides the `__add__()` method to support concatenation\n * of `BaseMessageChunk` instances.\n */\nexport class BaseMessageChunk extends BaseMessage {\n}\nexport function isBaseMessage(messageLike) {\n    return typeof messageLike?._getType === \"function\";\n}\nexport function isBaseMessageChunk(messageLike) {\n    return (isBaseMessage(messageLike) &&\n        typeof messageLike.concat === \"function\");\n}\n","import { BaseMessage, BaseMessageChunk, mergeContent, _mergeDicts, } from \"./base.js\";\n/**\n * Represents a tool message in a conversation.\n */\nexport class ToolMessage extends BaseMessage {\n    static lc_name() {\n        return \"ToolMessage\";\n    }\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return { tool_call_id: \"tool_call_id\" };\n    }\n    constructor(fields, tool_call_id, name) {\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = { content: fields, name, tool_call_id: tool_call_id };\n        }\n        super(fields);\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n    }\n    _getType() {\n        return \"tool\";\n    }\n    static isInstance(message) {\n        return message._getType() === \"tool\";\n    }\n}\n/**\n * Represents a chunk of a tool message, which can be concatenated\n * with other tool message chunks.\n */\nexport class ToolMessageChunk extends BaseMessageChunk {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n    }\n    static lc_name() {\n        return \"ToolMessageChunk\";\n    }\n    _getType() {\n        return \"tool\";\n    }\n    concat(chunk) {\n        return new ToolMessageChunk({\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: _mergeDicts(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: _mergeDicts(this.response_metadata, chunk.response_metadata),\n            tool_call_id: this.tool_call_id,\n        });\n    }\n}\nexport function defaultToolCallParser(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nrawToolCalls) {\n    const toolCalls = [];\n    const invalidToolCalls = [];\n    for (const toolCall of rawToolCalls) {\n        if (!toolCall.function) {\n            continue;\n        }\n        else {\n            const functionName = toolCall.function.name;\n            try {\n                const functionArgs = JSON.parse(toolCall.function.arguments);\n                const parsed = {\n                    name: functionName || \"\",\n                    args: functionArgs || {},\n                    id: toolCall.id,\n                };\n                toolCalls.push(parsed);\n            }\n            catch (error) {\n                invalidToolCalls.push({\n                    name: functionName,\n                    args: toolCall.function.arguments,\n                    id: toolCall.id,\n                    error: \"Malformed args.\",\n                });\n            }\n        }\n    }\n    return [toolCalls, invalidToolCalls];\n}\n","import { parsePartialJson } from \"../utils/json.js\";\nimport { BaseMessage, BaseMessageChunk, mergeContent, _mergeDicts, _mergeLists, } from \"./base.js\";\nimport { defaultToolCallParser, } from \"./tool.js\";\n/**\n * Represents an AI message in a conversation.\n */\nexport class AIMessage extends BaseMessage {\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            ...super.lc_aliases,\n            tool_calls: \"tool_calls\",\n            invalid_tool_calls: \"invalid_tool_calls\",\n        };\n    }\n    constructor(fields, \n    /** @deprecated */\n    kwargs) {\n        let initParams;\n        if (typeof fields === \"string\") {\n            initParams = {\n                content: fields,\n                tool_calls: [],\n                invalid_tool_calls: [],\n                additional_kwargs: kwargs ?? {},\n            };\n        }\n        else {\n            initParams = fields;\n            const rawToolCalls = initParams.additional_kwargs?.tool_calls;\n            const toolCalls = initParams.tool_calls;\n            if (!(rawToolCalls == null) &&\n                rawToolCalls.length > 0 &&\n                (toolCalls === undefined || toolCalls.length === 0)) {\n                console.warn([\n                    \"New LangChain packages are available that more efficiently handle\",\n                    \"tool calling.\\n\\nPlease upgrade your packages to versions that set\",\n                    \"message tool calls. e.g., `yarn add @langchain/anthropic`,\",\n                    \"yarn add @langchain/openai`, etc.\",\n                ].join(\" \"));\n            }\n            try {\n                if (!(rawToolCalls == null) && toolCalls === undefined) {\n                    const [toolCalls, invalidToolCalls] = defaultToolCallParser(rawToolCalls);\n                    initParams.tool_calls = toolCalls ?? [];\n                    initParams.invalid_tool_calls = invalidToolCalls ?? [];\n                }\n                else {\n                    initParams.tool_calls = initParams.tool_calls ?? [];\n                    initParams.invalid_tool_calls = initParams.invalid_tool_calls ?? [];\n                }\n            }\n            catch (e) {\n                // Do nothing if parsing fails\n                initParams.tool_calls = [];\n                initParams.invalid_tool_calls = [];\n            }\n        }\n        // Sadly, TypeScript only allows super() calls at root if the class has\n        // properties with initializers, so we have to check types twice.\n        super(initParams);\n        // These are typed as optional to avoid breaking changes and allow for casting\n        // from BaseMessage.\n        Object.defineProperty(this, \"tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"invalid_tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        /**\n         * If provided, token usage information associated with the message.\n         */\n        Object.defineProperty(this, \"usage_metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (typeof initParams !== \"string\") {\n            this.tool_calls = initParams.tool_calls ?? this.tool_calls;\n            this.invalid_tool_calls =\n                initParams.invalid_tool_calls ?? this.invalid_tool_calls;\n        }\n        this.usage_metadata = initParams.usage_metadata;\n    }\n    static lc_name() {\n        return \"AIMessage\";\n    }\n    _getType() {\n        return \"ai\";\n    }\n}\nexport function isAIMessage(x) {\n    return x._getType() === \"ai\";\n}\n/**\n * Represents a chunk of an AI message, which can be concatenated with\n * other AI message chunks.\n */\nexport class AIMessageChunk extends BaseMessageChunk {\n    constructor(fields) {\n        let initParams;\n        if (typeof fields === \"string\") {\n            initParams = {\n                content: fields,\n                tool_calls: [],\n                invalid_tool_calls: [],\n                tool_call_chunks: [],\n            };\n        }\n        else if (fields.tool_call_chunks === undefined) {\n            initParams = {\n                ...fields,\n                tool_calls: [],\n                invalid_tool_calls: [],\n                tool_call_chunks: [],\n            };\n        }\n        else {\n            const toolCalls = [];\n            const invalidToolCalls = [];\n            for (const toolCallChunk of fields.tool_call_chunks) {\n                let parsedArgs = {};\n                try {\n                    parsedArgs = parsePartialJson(toolCallChunk.args ?? \"{}\") ?? {};\n                    if (typeof parsedArgs !== \"object\" || Array.isArray(parsedArgs)) {\n                        throw new Error(\"Malformed tool call chunk args.\");\n                    }\n                    toolCalls.push({\n                        name: toolCallChunk.name ?? \"\",\n                        args: parsedArgs,\n                        id: toolCallChunk.id,\n                    });\n                }\n                catch (e) {\n                    invalidToolCalls.push({\n                        name: toolCallChunk.name,\n                        args: toolCallChunk.args,\n                        id: toolCallChunk.id,\n                        error: \"Malformed args.\",\n                    });\n                }\n            }\n            initParams = {\n                ...fields,\n                tool_calls: toolCalls,\n                invalid_tool_calls: invalidToolCalls,\n            };\n        }\n        // Sadly, TypeScript only allows super() calls at root if the class has\n        // properties with initializers, so we have to check types twice.\n        super(initParams);\n        // Must redeclare tool call fields since there is no multiple inheritance in JS.\n        // These are typed as optional to avoid breaking changes and allow for casting\n        // from BaseMessage.\n        Object.defineProperty(this, \"tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"invalid_tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"tool_call_chunks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        /**\n         * If provided, token usage information associated with the message.\n         */\n        Object.defineProperty(this, \"usage_metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_chunks =\n            initParams.tool_call_chunks ?? this.tool_call_chunks;\n        this.tool_calls = initParams.tool_calls ?? this.tool_calls;\n        this.invalid_tool_calls =\n            initParams.invalid_tool_calls ?? this.invalid_tool_calls;\n        this.usage_metadata = initParams.usage_metadata;\n    }\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            ...super.lc_aliases,\n            tool_calls: \"tool_calls\",\n            invalid_tool_calls: \"invalid_tool_calls\",\n            tool_call_chunks: \"tool_call_chunks\",\n        };\n    }\n    static lc_name() {\n        return \"AIMessageChunk\";\n    }\n    _getType() {\n        return \"ai\";\n    }\n    concat(chunk) {\n        const combinedFields = {\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: _mergeDicts(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: _mergeDicts(this.response_metadata, chunk.response_metadata),\n            tool_call_chunks: [],\n        };\n        if (this.tool_call_chunks !== undefined ||\n            chunk.tool_call_chunks !== undefined) {\n            const rawToolCalls = _mergeLists(this.tool_call_chunks, chunk.tool_call_chunks);\n            if (rawToolCalls !== undefined && rawToolCalls.length > 0) {\n                combinedFields.tool_call_chunks = rawToolCalls;\n            }\n        }\n        if (this.usage_metadata !== undefined ||\n            chunk.usage_metadata !== undefined) {\n            const left = this.usage_metadata ?? {\n                input_tokens: 0,\n                output_tokens: 0,\n                total_tokens: 0,\n            };\n            const right = chunk.usage_metadata ?? {\n                input_tokens: 0,\n                output_tokens: 0,\n                total_tokens: 0,\n            };\n            const usage_metadata = {\n                input_tokens: left.input_tokens + right.input_tokens,\n                output_tokens: left.output_tokens + right.output_tokens,\n                total_tokens: left.total_tokens + right.total_tokens,\n            };\n            combinedFields.usage_metadata = usage_metadata;\n        }\n        return new AIMessageChunk(combinedFields);\n    }\n}\n","import { BaseMessage, BaseMessageChunk, mergeContent, _mergeDicts, } from \"./base.js\";\n/**\n * Represents a chat message in a conversation.\n */\nexport class ChatMessage extends BaseMessage {\n    static lc_name() {\n        return \"ChatMessage\";\n    }\n    static _chatMessageClass() {\n        return ChatMessage;\n    }\n    constructor(fields, role) {\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = { content: fields, role: role };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    _getType() {\n        return \"generic\";\n    }\n    static isInstance(message) {\n        return message._getType() === \"generic\";\n    }\n}\n/**\n * Represents a chunk of a chat message, which can be concatenated with\n * other chat message chunks.\n */\nexport class ChatMessageChunk extends BaseMessageChunk {\n    static lc_name() {\n        return \"ChatMessageChunk\";\n    }\n    constructor(fields, role) {\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = { content: fields, role: role };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    _getType() {\n        return \"generic\";\n    }\n    concat(chunk) {\n        return new ChatMessageChunk({\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: _mergeDicts(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: _mergeDicts(this.response_metadata, chunk.response_metadata),\n            role: this.role,\n        });\n    }\n}\n","import { BaseMessage, BaseMessageChunk, mergeContent, _mergeDicts, } from \"./base.js\";\n/**\n * Represents a function message in a conversation.\n */\nexport class FunctionMessage extends BaseMessage {\n    static lc_name() {\n        return \"FunctionMessage\";\n    }\n    constructor(fields, \n    /** @deprecated */\n    name) {\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = { content: fields, name: name };\n        }\n        super(fields);\n    }\n    _getType() {\n        return \"function\";\n    }\n}\n/**\n * Represents a chunk of a function message, which can be concatenated\n * with other function message chunks.\n */\nexport class FunctionMessageChunk extends BaseMessageChunk {\n    static lc_name() {\n        return \"FunctionMessageChunk\";\n    }\n    _getType() {\n        return \"function\";\n    }\n    concat(chunk) {\n        return new FunctionMessageChunk({\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: _mergeDicts(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: _mergeDicts(this.response_metadata, chunk.response_metadata),\n            name: this.name ?? \"\",\n        });\n    }\n}\n","import { BaseMessage, BaseMessageChunk, mergeContent, _mergeDicts, } from \"./base.js\";\n/**\n * Represents a human message in a conversation.\n */\nexport class HumanMessage extends BaseMessage {\n    static lc_name() {\n        return \"HumanMessage\";\n    }\n    _getType() {\n        return \"human\";\n    }\n}\n/**\n * Represents a chunk of a human message, which can be concatenated with\n * other human message chunks.\n */\nexport class HumanMessageChunk extends BaseMessageChunk {\n    static lc_name() {\n        return \"HumanMessageChunk\";\n    }\n    _getType() {\n        return \"human\";\n    }\n    concat(chunk) {\n        return new HumanMessageChunk({\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: _mergeDicts(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: _mergeDicts(this.response_metadata, chunk.response_metadata),\n        });\n    }\n}\n","import { BaseMessage, BaseMessageChunk, mergeContent, _mergeDicts, } from \"./base.js\";\n/**\n * Represents a system message in a conversation.\n */\nexport class SystemMessage extends BaseMessage {\n    static lc_name() {\n        return \"SystemMessage\";\n    }\n    _getType() {\n        return \"system\";\n    }\n}\n/**\n * Represents a chunk of a system message, which can be concatenated with\n * other system message chunks.\n */\nexport class SystemMessageChunk extends BaseMessageChunk {\n    static lc_name() {\n        return \"SystemMessageChunk\";\n    }\n    _getType() {\n        return \"system\";\n    }\n    concat(chunk) {\n        return new SystemMessageChunk({\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: _mergeDicts(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: _mergeDicts(this.response_metadata, chunk.response_metadata),\n        });\n    }\n}\n","import { BaseCallbackHandler } from \"@langchain/core/callbacks/base\";\nimport { Serialized } from \"@langchain/core/load/serializable\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { LLMResult } from \"@langchain/core/outputs\";\nimport {\n  BaseMessage,\n  HumanMessage,\n  ChatMessage,\n  AIMessage,\n  SystemMessage,\n  FunctionMessage,\n  ToolMessage,\n} from \"@langchain/core/messages\";\nimport type { Document } from \"@langchain/core/documents\";\nimport {\n  Hamming,\n  MonitoringItem,\n  GenerationParams,\n  RetrievalParams,\n} from \"@hamming/hamming-sdk\";\n\nexport class HammingCallbackHandler extends BaseCallbackHandler {\n  name = \"HammingCallbackHandler\";\n  private hamming: Hamming;\n  private runItems: Record<string, MonitoringItem> = {};\n  private runParent: Record<string, string> = {};\n  private runLlmInput: Record<string, string> = {};\n  private runLlmSerialized: Record<string, Serialized> = {};\n  private runRetrieverQuery: Record<string, string> = {};\n  private runRetrieverSerialized: Record<string, Serialized> = {};\n\n  constructor(hamming: Hamming) {\n    super();\n    this.hamming = hamming;\n    this.hamming.monitoring.start();\n  }\n  async handleChainStart(\n    chain: Serialized,\n    inputs: ChainValues,\n    runId: string,\n    parentRunId?: string | undefined,\n    tags?: string[] | undefined,\n    metadata?: Record<string, unknown> | undefined,\n    runType?: string,\n    name?: string,\n  ): Promise<void> {\n    try {\n      if (parentRunId) {\n        this.runParent[runId] = parentRunId;\n        return;\n      }\n      const monitoringItem = await this.hamming.monitoring.startItem();\n      monitoringItem.setInput(inputs);\n      this.runItems[runId] = monitoringItem;\n    } catch (e) {\n      console.error(\"HammingCallbackHandler.handleChainStart\", e);\n    }\n  }\n\n  async handleChainEnd(\n    outputs: ChainValues,\n    runId: string,\n    parentRunId?: string | undefined,\n  ): Promise<void> {\n    try {\n      if (parentRunId) {\n        delete this.runParent[runId];\n        return;\n      }\n      const monitoringItem = this.runItems[runId];\n      if (!monitoringItem) {\n        console.warn(\"No monitoring item found for runId: \", runId);\n        return;\n      }\n      delete this.runItems[runId];\n      const obj = JSON.parse(JSON.stringify(outputs));\n      monitoringItem.setOutput({\n        response: obj.kwargs?.content,\n      });\n      monitoringItem.end();\n    } catch (e) {\n      console.error(\"HammingCallbackHandler.handleChainEnd\", e);\n    }\n  }\n\n  async handleChatModelStart(\n    llm: Serialized,\n    messages: BaseMessage[][],\n    runId: string,\n    parentRunId?: string,\n    extraParams?: Record<string, unknown>,\n    tags?: string[],\n    metadata?: Record<string, unknown>,\n    name?: string,\n  ): Promise<void> {\n    try {\n      const flattenedMessages = messages.flat();\n      const messageDicts = flattenedMessages.map((message) =>\n        convertMessage(message),\n      );\n      this.runLlmInput[runId] = JSON.stringify(messageDicts);\n      this.runLlmSerialized[runId] = llm;\n    } catch (e) {\n      console.error(\"HammingCallbackHandler.handleChatModelStart\", e);\n    }\n  }\n\n  async handleLLMStart(\n    llm: Serialized,\n    prompts: string[],\n    runId: string,\n    parentRunId?: string,\n    extraParams?: Record<string, unknown>,\n    tags?: string[],\n    metadata?: Record<string, unknown>,\n    name?: string,\n  ): Promise<void> {\n    try {\n      this.runLlmInput[runId] = JSON.stringify(prompts);\n      this.runLlmSerialized[runId] = llm;\n    } catch (e) {\n      console.error(\"HammingCallbackHandler.handleLLMStart\", e);\n    }\n  }\n  async handleLLMEnd(\n    output: LLMResult,\n    runId: string,\n    parentRunId?: string,\n    tags?: string[],\n  ): Promise<void> {\n    try {\n      const llmInput = this.runLlmInput[runId];\n      const llmSerialized = this.runLlmSerialized[runId];\n\n      const lastGenArr = output.generations[output.generations.length - 1];\n      const lastGen = lastGenArr[lastGenArr.length - 1];\n\n      const params: GenerationParams = {\n        input: llmInput,\n        output: lastGen.text,\n      };\n      if (llmSerialized.id.includes(\"openai\")) {\n        params.metadata = {\n          provider: \"openai\",\n          model: llmSerialized[\"kwargs\"][\"model\"],\n          temperature: llmSerialized[\"kwargs\"][\"temperature\"],\n        };\n      }\n\n      if (parentRunId) {\n        const topParentRunId = this._findTopParentRunId(parentRunId);\n        const monitoringItem = this.runItems[topParentRunId];\n        if (!monitoringItem) {\n          console.warn(\"No monitoring item found for runId: \", topParentRunId);\n          return;\n        }\n        monitoringItem.tracing.logGeneration(params);\n      } else {\n        this.hamming.tracing.logGeneration(params);\n      }\n    } catch (e) {\n      console.error(\"HammingCallbackHandler.handleLLMEnd\", e);\n    }\n  }\n\n  async handleRetrieverStart(\n    retriever: Serialized,\n    query: string,\n    runId: string,\n    parentRunId?: string | undefined,\n    tags?: string[] | undefined,\n    metadata?: Record<string, unknown> | undefined,\n    name?: string,\n  ): Promise<void> {\n    try {\n      this.runRetrieverQuery[runId] = query;\n      this.runRetrieverSerialized[runId] = retriever;\n    } catch (e) {\n      console.error(\"HammingCallbackHandler.handleRetrieverStart\", e);\n    }\n  }\n\n  async handleRetrieverEnd(\n    documents: Document<Record<string, any>>[],\n    runId: string,\n    parentRunId?: string | undefined,\n  ): Promise<void> {\n    try {\n      const query = this.runRetrieverQuery[runId];\n      const serialized = this.runRetrieverSerialized[runId];\n      const params: RetrievalParams = {\n        query,\n        results: documents.map((doc) => doc.pageContent),\n        metadata: {\n          engine: \"langchain\",\n        },\n      };\n      if (parentRunId) {\n        const topParentRunId = this._findTopParentRunId(parentRunId);\n        const monitoringItem = this.runItems[topParentRunId];\n        if (!monitoringItem) {\n          console.warn(\"No monitoring item found for runId: \", topParentRunId);\n          return;\n        }\n        monitoringItem.tracing.logRetrieval(params);\n      } else {\n        this.hamming.tracing.logRetrieval(params);\n      }\n    } catch (e) {\n      console.error(\"HammingCallbackHandler.handleRetrieverEnd\", e);\n    }\n  }\n\n  _findTopParentRunId(runId: string): string {\n    const parentRunId = this.runParent[runId];\n    if (!parentRunId) {\n      return runId;\n    }\n    return this._findTopParentRunId(parentRunId);\n  }\n}\n\nfunction convertMessage(message: BaseMessage): Record<string, unknown> {\n  let response: Record<string, unknown> | undefined;\n  if (message instanceof HumanMessage) {\n    response = { content: message.content, role: \"user\" };\n  } else if (message instanceof ChatMessage) {\n    response = { content: message.content, role: message.name };\n  } else if (message instanceof AIMessage) {\n    response = { content: message.content, role: \"assistant\" };\n  } else if (message instanceof SystemMessage) {\n    response = { content: message.content, role: \"system\" };\n  } else if (message instanceof FunctionMessage) {\n    response = {\n      content: message.content,\n      additional_kwargs: message.additional_kwargs,\n      role: message.name,\n    };\n  } else if (message instanceof ToolMessage) {\n    response = {\n      content: message.content,\n      additional_kwargs: message.additional_kwargs,\n      role: message.name,\n    };\n  } else if (!message.name) {\n    response = { content: message.content };\n  } else {\n    response = {\n      role: message.name,\n      content: message.content,\n    };\n  }\n  return response;\n}\n"],"mappings":"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","names":["require_decamelize","__commonJSMin","exports","module","str","sep","require_camelcase","__commonJSMin","exports","module","UPPERCASE","LOWERCASE","LEADING_CAPITAL","IDENTIFIER","SEPARATORS","LEADING_SEPARATORS","SEPARATORS_AND_IDENTIFIER","NUMBERS_AND_IDENTIFIER","preserveCamelCase","string","toLowerCase","toUpperCase","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","preserveConsecutiveUppercase","input","m1","postProcess","_","identifier","m","camelCase","options","x","crypto","rnds8Pool","poolPtr","rng","byteToHex","i","unsafeStringify","arr","offset","crypto","native_default","v4","options","buf","offset","native_default","rnds","rng","i","unsafeStringify","v4_default","import_decamelize","import_camelcase","keyToJson","key","map","snakeCase","mapKeys","fields","mapper","map","mapped","key","shallowCopy","obj","replaceSecrets","root","secretsMap","result","path","secretId","last","partsReverse","current","part","get_lc_unique_name","serializableClass","parentClass","Serializable","_Serializable","kwargs","_args","aliases","secrets","acc","key","keyPath","read","write","mapKeys","keyToJson","getEnvironmentVariable","name","BaseCallbackHandlerMethodsClass","BaseCallbackHandler","_BaseCallbackHandler","get_lc_unique_name","input","getEnvironmentVariable","Serializable","methods","Handler","v4_default","BaseMessage","Serializable","fields","kwargs","ToolMessage","BaseMessage","fields","tool_call_id","name","message","defaultToolCallParser","rawToolCalls","toolCalls","invalidToolCalls","toolCall","functionName","functionArgs","parsed","AIMessage","BaseMessage","fields","kwargs","initParams","rawToolCalls","toolCalls","invalidToolCalls","defaultToolCallParser","ChatMessage","_ChatMessage","BaseMessage","fields","role","message","FunctionMessage","BaseMessage","fields","name","HumanMessage","BaseMessage","SystemMessage","BaseMessage","HammingCallbackHandler","BaseCallbackHandler","hamming","__publicField","chain","inputs","runId","parentRunId","tags","metadata","runType","name","monitoringItem","e","outputs","obj","llm","messages","extraParams","messageDicts","message","convertMessage","prompts","output","llmInput","llmSerialized","lastGenArr","lastGen","params","topParentRunId","retriever","query","documents","serialized","doc","response","HumanMessage","ChatMessage","AIMessage","SystemMessage","FunctionMessage","ToolMessage"]}